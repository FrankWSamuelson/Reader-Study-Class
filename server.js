// Query I used to make session database table
// CREATE TABLE IF NOT EXISTS myschema.session (
//   sid varchar NOT NULL COLLATE "default",
//   sess json NOT NULL,
//   expire timestamp(6) NOT NULL,
//   CONSTRAINT "session_pkey" PRIMARY KEY ("sid")
// );
// CREATE INDEX IF NOT EXISTS "IDX_session_expire" ON myschema.session ("expire");

// Query obtained here: https://medium.com/developer-rants/how-to-handle-sessions-properly-in-express-js-with-heroku-c35ea8c0e500

require('dotenv').config()

const path = require('path')
const {spawn} = require('child_process');
const port = process.env.PORT || 3000;

const express = require('express')
const app = express()

const { Server } = require('ws');

const users = require('./src/routes/users')
const launch_lti = require('./src/routes/launch_lti')

const lti = require('ims-lti');

// app.use(cookieParser())
// app.set('trust proxy', 1)

const pool = require('./src/util/db')
const sess = require('./src/util/session')

app.use(sess)

// Used to parse request data that sent from web pages in JSON format
app.use(express.json())
app.use(express.urlencoded({extended: false}))

app.use('/users', users)

// Route for launch URL of app from Canvas assignment pages
app.post('/launch', launch_lti.handleLaunch);

// Route for posting grade to student's profile
app.post('/postGrade', function(req, res) {
  const provider = new lti.Provider(process.env.CONSUMER_KEY, process.env.CONSUMER_SECRET, new lti.Stores.MemoryStore(), lti.HMAC_SHA1);

  provider.valid_request(req, req.session.canvas_lti_launch_params, (_err, _isValid) => {
      provider.outcome_service.send_replace_result(parseFloat(req.body.score), (_err, _result) => {
        console.log("Graded")
      })
  });

  // console.log(req.cookies.canvas_lti_launch_params);

  // provider.valid_request(req, req.cookies.canvas_lti_launch_params, (_err, _isValid) => {
  //     provider.outcome_service.send_replace_result(parseFloat(req.body.score), (_err, _result) => {
  //       console.log("Graded")
  //     })
  // });
})

app.post('/add-selection', (req, res) => {
  console.log(req.body)

  /* Answer_date is of type 'timestamp with time zone' in PostgreSQL.*/
  pool.query("INSERT INTO results(session_id, student_id, username, assessment, prompt_image, answer, solution, answer_date) \
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8)", [
      req.sessionID,
      req.session.student_id,
      req.session.username,
      req.body.assessment,
      req.body.promptImage,
      req.body.answer,
      req.body.solution,
      req.body.answerDate,
  ], (err, result) => {
    if (err) throw err;
  })
})

// As an admin, unlock the testing section for students to take
app.post('/unlock-testing', function (req, res) {
  pool.query(`UPDATE unlocksections SET unlocked=true WHERE assessment='testing'`, function(err, result) {
    if (err) throw err;
  })
})

// Check if admin has granted access to the testing section
app.get('/unlocked-testing', function (req, res) {
  pool.query(`SELECT unlocked FROM unlocksections WHERE assessment='testing'`, function(err, result) {
    console.log(result.rows[0])

    res.status(200).json(result.rows[0])
  })
})

app.get('/test-python', (req, res) => {
  let dataToSend;
  // spawn new child process to call the python script
  const python = spawn('python', ['./src/scripts/test.py']);
  // collect data from script
  python.stdout.on('data', function (data) {
   console.log('Pipe data from python script ...');
   dataToSend = data.toString();
  });
  // in close event we are sure that stream from child process is closed
  python.on('close', (code) => {
  console.log(`child process close all stdio with code ${code}`);
  // send data to browser
  res.send(dataToSend)
  });  
})

// Renders HTML file from Simplephy source code
app.use(express.static(path.join(__dirname, 'static')));
app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, 'static', 'main.html'))  
})

// Renders HTML file generated by npm build command
app.use(express.static(path.join(__dirname, 'build')));
app.get(/[a-z]+/, function (req, res) {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

var server = app.listen(port, function(){
  console.log( `Server is listening at port ${port}`);
})

/**
 * Primary reference for capturing session data through web sockets
 * https://github.com/websockets/ws/blob/master/examples/express-session-parse/index.js
 */
const wss = new Server({ noServer: true })

server.on('upgrade', function (request, socket, head) {
  // console.log('Parsing session from request...');

  sess(request, {}, () => {
    if (!request.sessionID) {
      socket.write('HTTP/1.1 401 Unauthorized\r\n\r\n');
      socket.destroy();
      return;
    }

    // console.log('Session is parsed!');

    wss.handleUpgrade(request, socket, head, function (ws) {
      wss.emit('connection', ws, request);
    });
  });
});

wss.on('connection', (ws, req) => { 
  console.log('Connected')

  let username;

  // Retrieve current student's username
  pool.query("SELECT username FROM students WHERE student_id=$1", [
    req.session.student_id
  ], (err, result) => {
    if (err) throw err;

    let retrieved;
    retrieved = JSON.parse(JSON.stringify(result.rows[0]));
    username = retrieved.username;

    // Create new entry in 'active_connections' table in database
    pool.query(`
      INSERT INTO active_connections(session_id, student_id, username, active) 
      VALUES($1, $2, $3, $4)`, [
        req.sessionID,
        req.session.student_id,
        username,
        true
    ], (err, result) => {
      if (err) throw err;
    })
  })

  ws.on('message', (data) => {
    console.log(`We got the username. It's ${username}`)

    let connectionUpdate = JSON.parse(data)

    let last_answered = connectionUpdate.last_answered;
    let current_test = connectionUpdate.current_test;

    pool.query("UPDATE active_connections SET last_answered=$1, current_test=$2 WHERE session_id=$3", [
      last_answered,
      current_test,
      req.sessionID
    ], (err, result) => {
      if (err) throw err;
    })
  })

  ws.on('close', () => {
    console.log('Connection closed.')

    pool.query("UPDATE active_connections SET active=$1 WHERE session_id=$2", [
      false,
      req.sessionID
    ], (err, result) => {
      if (err) throw err;
    })
  });
});